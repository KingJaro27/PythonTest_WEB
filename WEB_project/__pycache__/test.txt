main.py:
from flask import Flask, render_template, request, redirect, url_for, session, flash, g
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
from tester import PythonTester, TestCase
import os
import tempfile

app = Flask(__name__)
app.secret_key = "9515d755178ad60074008112b4f06acf74e810389559766c047f53f189718679"
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///database.db"
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

db = SQLAlchemy(app)


class User(db.Model):
    __tablename__ = "users"
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(120), nullable=False)
    email = db.Column(db.String(120))
    join_date = db.Column(db.DateTime, default=datetime.utcnow)
    progress = db.relationship("UserProgress", backref="user", lazy=True)


class Task(db.Model):
    __tablename__ = "tasks"
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(120), nullable=False)
    description = db.Column(db.Text, nullable=False)
    difficulty = db.Column(db.String(50), nullable=False)
    test_cases = db.relationship("TestCase", backref="task", lazy=True)
    user_progress = db.relationship("UserProgress", backref="task", lazy=True)


class TestCase(db.Model):
    __tablename__ = "test_cases"
    id = db.Column(db.Integer, primary_key=True)
    task_id = db.Column(db.Integer, db.ForeignKey("tasks.id"), nullable=False)
    input = db.Column(db.Text, nullable=False)
    output = db.Column(db.Text, nullable=False)


class UserProgress(db.Model):
    __tablename__ = "user_progress"
    user_id = db.Column(db.Integer, db.ForeignKey("users.id"), primary_key=True)
    task_id = db.Column(db.Integer, db.ForeignKey("tasks.id"), primary_key=True)
    completed = db.Column(db.Boolean, default=False)
    completion_date = db.Column(db.DateTime)


def init_db():
    with app.app_context():
        db.create_all()

        if Task.query.count() == 0:
            sample_tasks = [
                #EASY TASKS
                {
                    "title": "Sum Two Numbers",
                    "description": "Write a function that takes two numbers from input and returns their sum.",
                    "difficulty": "Easy",
                    "test_cases": [
                        {"input": "2, 3", "output": "5"},
                        {"input": "10, -5", "output": "5"},
                    ],
                },
                {
                    "title": "Even or Odd",
                    "description": "Write a function that takes a number and returns 'Even' if the number is even, 'Odd' otherwise.",
                    "difficulty": "Easy",
                    "test_cases": [
                        {"input": "4", "output": "Even"},
                        {"input": "7", "output": "Odd"},
                        {"input": "0", "output": "Even"},
                    ],
                },
                {
                    "title": "Reverse String",
                    "description": "Write a function that reverses a string.",
                    "difficulty": "Easy",
                    "test_cases": [
                        {"input": "'hello'", "output": "olleh"},
                        {"input": "'Python'", "output": "nohtyP"},
                        {"input": "''", "output": ""},
                    ],
                },
                {
                    "title": "Count Vowels",
                    "description": "Write a function that counts the number of vowels in a string (a, e, i, o, u).",
                    "difficulty": "Easy",
                    "test_cases": [
                        {"input": "'hello'", "output": "2"},
                        {"input": "'Python is awesome'", "output": "6"},
                        {"input": "'xyz'", "output": "0"},
                    ],
                },
                {
                    "title": "Find Maximum",
                    "description": "Write a function that takes three numbers and returns the largest one.",
                    "difficulty": "Easy",
                    "test_cases": [
                        {"input": "1, 2, 3", "output": "3"},
                        {"input": "-5, -1, -10", "output": "-1"},
                        {"input": "0, 0, 0", "output": "0"},
                    ],
                },
                {
                    "title": "Calculate Average",
                    "description": "Write a function that calculates the average of a list of numbers.",
                    "difficulty": "Easy",
                    "test_cases": [
                        {"input": "[1, 2, 3, 4, 5]", "output": "3.0"},
                        {"input": "[10, 20, 30]", "output": "20.0"},
                        {"input": "[-1, 0, 1]", "output": "0.0"},
                    ],
                },
                #MEDIUM TASKS
                {
                    "title": "Factorial Calculator",
                    "description": "Write a function that calculates the factorial of a number.",
                    "difficulty": "Medium",
                    "test_cases": [
                        {"input": "5", "output": "120"},
                        {"input": "0", "output": "1"},
                        {"input": "10", "output": "3628800"},
                    ],
                },
                {
                    "title": "Prime Number Checker",
                    "description": "Write a function that checks if a number is prime.",
                    "difficulty": "Medium",
                    "test_cases": [
                        {"input": "7", "output": "True"},
                        {"input": "4", "output": "False"},
                        {"input": "1", "output": "False"},
                    ],
                },
                {
                    "title": "Fibonacci Sequence",
                    "description": "Write a function that returns the nth Fibonacci number.",
                    "difficulty": "Medium",
                    "test_cases": [
                        {"input": "0", "output": "0"},
                        {"input": "1", "output": "1"},
                        {"input": "10", "output": "55"},
                    ],
                },
                {
                    "title": "Palindrome Checker",
                    "description": "Write a function that checks if a string is a palindrome (reads the same backward as forward).",
                    "difficulty": "Medium",
                    "test_cases": [
                        {"input": "'racecar'", "output": "True"},
                        {"input": "'hello'", "output": "False"},
                        {"input": "'A man a plan a canal Panama'", "output": "True"},
                    ],
                },
                {
                    "title": "Anagram Checker",
                    "description": "Write a function that checks if two strings are anagrams of each other.",
                    "difficulty": "Medium",
                    "test_cases": [
                        {"input": "'listen', 'silent'", "output": "True"},
                        {"input": "'hello', 'world'", "output": "False"},
                        {
                            "input": "'Tom Marvolo Riddle', 'I am Lord Voldemort'",
                            "output": "True",
                        },
                    ],
                },
                {
                    "title": "List Intersection",
                    "description": "Write a function that returns the intersection of two lists (common elements).",
                    "difficulty": "Medium",
                    "test_cases": [
                        {"input": "[1, 2, 3], [2, 3, 4]", "output": "[2, 3]"},
                        {"input": "['a', 'b', 'c'], ['x', 'y', 'z']", "output": "[]"},
                        {"input": "[1, 1, 2, 3], [1, 1, 1, 4]", "output": "[1]"},
                    ],
                },
                #HARD TASKS
                {
                    "title": "Binary Search",
                    "description": "Implement the binary search algorithm to find an element in a sorted list.",
                    "difficulty": "Hard",
                    "test_cases": [
                        {"input": "[1, 3, 5, 7, 9], 5", "output": "2"},
                        {"input": "[1, 3, 5, 7, 9], 2", "output": "-1"},
                        {"input": "[], 1", "output": "-1"},
                    ],
                },
                {
                    "title": "Merge Two Sorted Lists",
                    "description": "Write a function that merges two sorted lists into one sorted list.",
                    "difficulty": "Hard",
                    "test_cases": [
                        {
                            "input": "[1, 3, 5], [2, 4, 6]",
                            "output": "[1, 2, 3, 4, 5, 6]",
                        },
                        {"input": "[], [1, 2, 3]", "output": "[1, 2, 3]"},
                        {
                            "input": "[5, 6, 7], [1, 2, 3]",
                            "output": "[1, 2, 3, 5, 6, 7]",
                        },
                    ],
                },
                {
                    "title": "Valid Parentheses",
                    "description": "Write a function that checks if a string of parentheses is balanced.",
                    "difficulty": "Hard",
                    "test_cases": [
                        {"input": "'()[]{}'", "output": "True"},
                        {"input": "'(]'", "output": "False"},
                        {"input": "'([{}])'", "output": "True"},
                    ],
                },
                {
                    "title": "Longest Substring Without Repeating Characters",
                    "description": "Find the length of the longest substring without repeating characters.",
                    "difficulty": "Hard",
                    "test_cases": [
                        {"input": "'abcabcbb'", "output": "3"},
                        {"input": "'bbbbb'", "output": "1"},
                        {"input": "'pwwkew'", "output": "3"},
                    ],
                },
                {
                    "title": "Matrix Rotation",
                    "description": "Rotate an N x N matrix 90 degrees clockwise.",
                    "difficulty": "Hard",
                    "test_cases": [
                        {
                            "input": "[[1,2,3],[4,5,6],[7,8,9]]",
                            "output": "[[7, 4, 1], [8, 5, 2], [9, 6, 3]]",
                        },
                        {"input": "[[1]]", "output": "[[1]]"},
                        {"input": "[[1,2],[3,4]]", "output": "[[3, 1], [4, 2]]"},
                    ],
                },
                {
                    "title": "Word Break",
                    "description": "Given a string and a dictionary of words, determine if the string can be segmented into space-separated words from the dictionary.",
                    "difficulty": "Hard",
                    "test_cases": [
                        {"input": "'leetcode', ['leet', 'code']", "output": "True"},
                        {
                            "input": "'applepenapple', ['apple', 'pen']",
                            "output": "True",
                        },
                        {
                            "input": "'catsandog', ['cats', 'dog', 'sand', 'and', 'cat']",
                            "output": "False",
                        },
                    ],
                },
                #Beserk tasks
                {
                    "title": "Quantum Algorithm Simulator",
                    "description": "Implement a quantum gate simulator that can handle Hadamard and CNOT gates. Minimum 50 lines of code required.",
                    "difficulty": "Beserk",
                    "test_cases": [
                        {"input": "H|0>", "output": "(0.70710678+0j)|0> + (0.70710678+0j)|1>"},
                        {"input": "CNOT|10>", "output": "|11>"}
                    ]
                },
                {
                    "title": "Blockchain Miner",
                    "description": "Implement a proof-of-work blockchain miner with SHA-256 hashing. Minimum 60 lines of code required.",
                    "difficulty": "Beserk",
                    "test_cases": [
                        {"input": "'Hello' 3", "output": "Valid nonce found: 42"},
                        {"input": "'Test' 4", "output": "Valid nonce found: 1234"}
                    ]
                },
                {
                    "title": "Neural Network Framework",
                    "description": "Create a neural network from scratch with backpropagation. Minimum 70 lines of code required.",
                    "difficulty": "Beserk",
                    "test_cases": [
                        {"input": "XOR_dataset", "output": "Accuracy > 85%"},
                        {"input": "Linear_dataset", "output": "Accuracy > 90%"}
                    ]
                }
            ]

            for task_data in sample_tasks:
                task = Task(
                    title=task_data["title"],
                    description=task_data["description"],
                    difficulty=task_data["difficulty"],
                )
                db.session.add(task)
                db.session.flush()

                for case in task_data["test_cases"]:
                    test_case = TestCase(
                        task_id=task.id, input=case["input"], output=case["output"]
                    )
                    db.session.add(test_case)

            db.session.commit()


init_db()


@app.route("/")
def index():
    difficulty = request.args.get("difficulty", None)
    query = Task.query
    completed_task_ids = []
    if "user_id" in session:
        completed_progress = UserProgress.query.filter_by(
            user_id=session["user_id"],
            completed=True
        ).all()
        completed_task_ids = [progress.task_id for progress in completed_progress]
    
    beserk_unlocked = False
    if "user_id" in session:
        total_completed = len(completed_task_ids)
        hard_completed = UserProgress.query.join(Task).filter(
            UserProgress.user_id == session["user_id"],
            UserProgress.completed == True,
            Task.difficulty == 'Hard'
        ).count()
        beserk_unlocked = total_completed >= 10 and hard_completed >= 3

    if difficulty == 'Beserk':
        query = query.filter_by(difficulty='Beserk')
    elif difficulty in ['Easy', 'Medium', 'Hard']:
        query = query.filter_by(difficulty=difficulty)
    
    tasks = query.all()
    
    return render_template(
        "index.html",
        tasks=tasks,
        completed_tasks=completed_task_ids,
        beserk_unlocked=beserk_unlocked,
        current_difficulty=difficulty,
        logged_in="user_id" in session,
        username=session.get("username")
    )


@app.route("/register", methods=["GET", "POST"])
def register():
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]
        email = request.form.get("email", "")
        if User.query.filter_by(username=username).first():
            flash("Username already taken", "danger")
            return redirect(url_for("register"))
        try:
            new_user = User(
                username=username,
                password_hash=generate_password_hash(password),
                email=email,
            )
            db.session.add(new_user)
            db.session.flush()
            tasks = Task.query.all()
            for task in tasks:
                progress = UserProgress(user_id=new_user.id, task_id=task.id)
                db.session.add(progress)
            db.session.commit()
            flash("Registration successful! Please login.", "success")
            return redirect(url_for("login"))
        except Exception as e:
            db.session.rollback()
            flash("An error occurred during registration", "danger")
    return render_template("register.html")


@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        username = request.form["username"]
        password = request.form["password"]

        user = User.query.filter_by(username=username).first()

        if user and check_password_hash(user.password_hash, password):
            session["user_id"] = user.id
            session["username"] = user.username
            flash("Logged in successfully!", "success")
            return redirect(url_for("index"))

        flash("Invalid username or password", "danger")
    return render_template("login.html")


@app.route("/logout")
def logout():
    session.pop("user_id", None)
    session.pop("username", None)
    flash("Logged out successfully", "info")
    return redirect(url_for("index"))


@app.route("/profile")
def profile():
    if "user_id" not in session:
        flash("Please login to view your profile", "danger")
        return redirect(url_for("login"))

    user = User.query.get(session["user_id"])
    
    difficulties = ['Easy', 'Medium', 'Hard', 'Beserk']
    counts = {}
    
    for diff in difficulties:
        counts[f'total_{diff.lower()}'] = Task.query.filter_by(difficulty=diff).count()
        counts[f'completed_{diff.lower()}'] = UserProgress.query.join(Task).filter(
            UserProgress.user_id == session["user_id"],
            UserProgress.completed == True,
            Task.difficulty == diff
        ).count()
    
    recent_tasks = db.session.query(Task, UserProgress.completion_date).join(
        UserProgress, UserProgress.task_id == Task.id
    ).filter(
        UserProgress.user_id == session["user_id"],
        UserProgress.completed == True
    ).order_by(
        UserProgress.completion_date.desc()
    ).limit(5).all()
    
    total_easy = Task.query.filter_by(difficulty='Easy').count()
    total_medium = Task.query.filter_by(difficulty='Medium').count()
    total_hard = Task.query.filter_by(difficulty='Hard').count()
    total_beserk = Task.query.filter_by(difficulty='Beserk').count()
    
    completed_easy = UserProgress.query.join(Task).filter(
        UserProgress.user_id == session["user_id"],
        UserProgress.completed == True,
        Task.difficulty == 'Easy'
    ).count()
    
    completed_medium = UserProgress.query.join(Task).filter(
        UserProgress.user_id == session["user_id"],
        UserProgress.completed == True,
        Task.difficulty == 'Medium'
    ).count()
    
    
    completed_hard = UserProgress.query.join(Task).filter(
        UserProgress.user_id == session["user_id"],
        UserProgress.completed == True,
        Task.difficulty == 'Hard'
    ).count()
    
    completed_beserk = UserProgress.query.join(Task).filter(
        UserProgress.user_id == session["user_id"],
        UserProgress.completed == True,
        Task.difficulty == 'Beserk'
    ).count()
    
    total_completed = sum(counts[f'completed_{diff.lower()}'] for diff in difficulties)
    hard_completed = counts['completed_hard']
    beserk_unlocked = total_completed >= 10 and hard_completed >= 3
    total_tasks = total_easy + total_medium + total_hard + total_beserk
    completed_tasks = completed_easy + completed_medium + completed_hard + completed_beserk
    
    return render_template(
        "profile.html",
        user=user,
        recent_tasks=recent_tasks,
        total_tasks=total_tasks,
        completed_tasks=completed_tasks,
        beserk_unlocked=beserk_unlocked,
        logged_in=True,
        username=session.get("username"),
        **counts
    )
    
@app.route("/completed")
def completed_tasks():
    difficulty = request.args.get('difficulty', None)
    
    if "user_id" not in session:
        flash("Please login to view completed tasks", "danger")
        return redirect(url_for("login"))
    
    query = db.session.query(Task).join(UserProgress).filter(
        UserProgress.user_id == session["user_id"],
        UserProgress.completed == True
    )
    
    if difficulty in ['Easy', 'Medium', 'Hard']:
        query = query.filter(Task.difficulty == difficulty)
    
    tasks = query.all()
    
    return render_template(
        "completed.html",
        logged_in=True,
        username=session.get("username"),
        tasks=tasks,
        current_difficulty=difficulty
    )
    
@app.route("/task/<int:task_id>")
def view_task(task_id):
    task = Task.query.get_or_404(task_id)
    test_cases = TestCase.query.filter_by(task_id=task_id).all()

    completed = False
    if "user_id" in session:
        progress = UserProgress.query.filter_by(
            user_id=session["user_id"], task_id=task_id
        ).first()
        completed = progress.completed if progress else False

    return render_template(
        "task.html",
        task=task,
        test_cases=test_cases,
        logged_in="user_id" in session,
        completed=completed,
    )


@app.route("/submit_solution/<int:task_id>", methods=["POST"])
def submit_solution(task_id):
    if "user_id" not in session:
        flash("Please login to submit solutions", "danger")
        return redirect(url_for("login"))

    task = Task.query.get_or_404(task_id)
    
    if task.difficulty == "Beserk":
        total_completed = UserProgress.query.filter_by(
            user_id=session["user_id"],
            completed=True
        ).count()
        
        hard_completed = UserProgress.query.join(Task).filter(
            UserProgress.user_id == session["user_id"],
            UserProgress.completed == True,
            Task.difficulty == 'Hard'
        ).count()
        
        if not (total_completed >= 10 and hard_completed >= 3):
            flash("Complete 10 tasks (including 3 Hard) to unlock Beserk challenges!", "danger")
            return redirect(url_for('index'))

    task = Task.query.get_or_404(task_id)
    test_cases = TestCase.query.filter_by(task_id=task_id).all()

    tester = PythonTester()
    for case in test_cases:
        tester.add_test_case(case.input, case.output)

    if "pythonFile" in request.files:
        file = request.files["pythonFile"]
        if file and file.filename.endswith(".py"):
            temp_path = os.path.join(tempfile.gettempdir(), file.filename)
            file.save(temp_path)
            with open(temp_path, "r") as f:
                user_code = f.read()

            os.remove(temp_path)
        else:
            flash("Please upload a valid Python (.py) file", "danger")
            return redirect(url_for("view_task", task_id=task_id))
    else:
        user_code = request.form["code"]

    all_passed = tester.test_python_code(user_code)
    test_results = tester.get_test_results()

    if all_passed:
        progress = UserProgress.query.filter_by(
            user_id=session["user_id"], task_id=task_id
        ).first()

        if progress and not progress.completed:
            progress.completed = True
            progress.completion_date = datetime.utcnow()
            db.session.commit()

        flash("All tests passed! Solution accepted.", "success")
    else:
        error_messages = []
        for result in test_results:
            if result["status"] != "Passed":
                msg = f"Test Case {result['test_case']} {result['status']}:\n"
                msg += f"Input: {result['input']}\n"
                msg += f"Expected: {result['expected']}\n"
                if result["status"] == "Error":
                    msg += f"Error: {result['actual']}"
                else:
                    msg += f"Got: {result['actual']}"
                error_messages.append(msg)

        flash("\n\n".join(error_messages), "danger")

    return redirect(url_for("view_task", task_id=task_id))


if __name__ == "__main__":
    app.run(debug=True)
tester.py:
import os
import subprocess
from difflib import Differ
from time import time
from typing import List, Tuple, Optional
import tempfile



class TestCase:
    def __init__(
        self,
        input_data: str,
        expected_output: str,
        time_limit: float = 2.0,
        memory_limit: int = 256,
    ):
        self.input_data = input_data
        self.expected_output = expected_output
        self.time_limit = time_limit
        self.memory_limit = memory_limit


class PythonTester:
    def __init__(self):
        self.test_cases: List[TestCase] = []
        self.results = []
        self.language_config = {
            "python": {"compile": None, "run": lambda f: ["python", f], "ext": ".py"},
            "cpp": {
                "compile": lambda s, t: ["g++", s, "-o", t],
                "run": lambda f: [f"./{f}"],
                "ext": ".cpp",
            },
            "java": {
                "compile": lambda s, t: ["javac", s],
                "run": lambda f: ["java", f[:-5]],  # без .class
                "ext": ".java",
            },
            "c": {
                "compile": lambda s, t: ["gcc", s, "-o", t],
                "run": lambda f: [f"./{f}"],
                "ext": ".c",
            },
            "go": {
                "compile": lambda s, t: ["go", "build", "-o", t, s],
                "run": lambda f: [f"./{f}"],
                "ext": ".go",
            },
        }
    def get_test_results(self):
        """Return detailed test results"""
        results = []
        for i, (test, result) in enumerate(zip(self.test_cases, self.results), 1):
            result_dict = {
                'test_case': i,
                'input': test.input_data,
                'expected': test.expected_output,
                'status': result.get('status', 'Not run')
            }
            
            if 'error' in result:
                result_dict['status'] = 'Error'
                result_dict['actual'] = result['error']
            elif 'actual' in result:
                result_dict['actual'] = result['actual']
                result_dict['diff'] = result.get('diff', '')
            else:
                result_dict['actual'] = test.expected_output 
                
            results.append(result_dict)
        
        return results

    def test_python_code(self, code: str) -> bool:
        self.results = [] 
        
        with tempfile.NamedTemporaryFile(suffix='.py', delete=False) as temp:
            temp.write(code.encode('utf-8'))
            temp_path = temp.name
        
        try:
            all_passed = self.run_tests(temp_path)
        finally:
            os.unlink(temp_path)
        
        return all_passed

    def detect_language(self, filename: str) -> Optional[str]:
        """Определение языка программирования по расширению файла"""
        ext = os.path.splitext(filename)[1].lower()
        for lang, config in self.language_config.items():
            if config["ext"] == ext:
                return lang
        return None

    def add_test_case(
        self,
        input_data: str,
        expected_output: str,
        time_limit: float = 2.0,
        memory_limit: int = 256,
    ):
        """Добавить тестовый случай"""
        self.test_cases.append(
            TestCase(input_data, expected_output, time_limit, memory_limit)
        )

    def load_test_cases_from_files(
        self, input_files: List[str], output_files: List[str]
    ):
        """Загрузка тестов из файлов"""
        for in_file, out_file in zip(input_files, output_files):
            with open(in_file, "r") as f:
                input_data = f.read()
            with open(out_file, "r") as f:
                expected_output = f.read()
            self.add_test_case(input_data, expected_output)

    def compile_program(
        self, source_file: str, target: str = "program"
    ) -> Tuple[bool, str]:
        """Компиляция программы (если нужно)"""
        lang = self.detect_language(source_file)
        if not lang:
            return False, f"Unsupported file extension: {source_file}"

        if not os.path.exists(source_file):
            return False, f"File not found: {source_file}"

        compile_cmd = self.language_config[lang]["compile"]
        if compile_cmd is None:
            return True, "No compilation needed"

        try:
            process = subprocess.run(
                compile_cmd(source_file, target),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                timeout=10,
            )
            if process.returncode != 0:
                return False, process.stderr.decode()
            return True, "Compilation successful"
        except subprocess.TimeoutExpired:
            return False, "Compilation timeout"
        except Exception as e:
            return False, str(e)

    def run_program(
        self, program_path: str, input_data: str, time_limit=1.0
    ) -> Tuple[Optional[str], Optional[str], float]:
        """Запуск программы с входными данными"""
        lang = self.detect_language(program_path)

        if not lang:
            return None, f"Unsupported file extension: {program_path}", 0.0

        run_cmd = self.language_config[lang]["run"]

        try:
            start_time = time()
            process = subprocess.run(
                run_cmd(program_path),
                input=input_data.encode(),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                timeout=time_limit,
            )
            exec_time = time() - start_time

            if process.returncode != 0:
                return None, process.stderr.decode(), exec_time
            return process.stdout.decode().strip(), None, exec_time
        except subprocess.TimeoutExpired:
            return None, "Time limit exceeded", time_limit
        except Exception as e:
            return None, str(e), 0.0

    def normalize_output(self, output: str) -> str:
        """Нормализация вывода для сравнения"""
        lines = [line.rstrip() for line in output.splitlines()]
        lines = [line for line in lines if line != ""]
        return "\n".join(lines)

    def compare_outputs(self, actual: str, expected: str) -> Optional[str]:
        """Сравнение вывода с ожидаемым результатом"""
        actual_norm = self.normalize_output(actual)
        expected_norm = self.normalize_output(expected)

        if actual_norm == expected_norm:
            return None

        d = Differ()
        diff = list(
            d.compare(
                expected_norm.splitlines(keepends=True),
                actual_norm.splitlines(keepends=True),
            )
        )
        return "".join(diff)

    def run_tests(self, program_path: str) -> bool:
        self.results = [] 
        all_passed = True
        
        for i, test in enumerate(self.test_cases, 1):
            result = {
                'test_case': i,
                'input': test.input_data,
                'expected': test.expected_output
            }
            
            actual, error, exec_time = self.run_program(
                program_path, test.input_data, test.time_limit
            )
            
            if error:
                result.update({
                    'status': 'Error',
                    'actual': error,
                    'time': exec_time
                })
                all_passed = False
            else:
                diff = self.compare_outputs(actual, test.expected_output)
                if diff:
                    result.update({
                        'status': 'Failed',
                        'actual': actual,
                        'diff': diff,
                        'time': exec_time
                    })
                    all_passed = False
                else:
                    result.update({
                        'status': 'Passed',
                        'actual': actual,
                        'time': exec_time
                    })
            
            self.results.append(result)
        
        return all_passed

    def generate_report(self, filename: str = "test_report.txt"):
        with open(filename, "w") as f:
            f.write("=== Test Report ===\n\n")

            total = len(self.results)
            passed = sum(1 for r in self.results if r["status"] == "Passed")
            failed = total - passed

            f.write(f"Total tests: {total}\n")
            f.write(f"Passed: {passed}\n")
            f.write(f"Failed: {failed}\n\n")
            for result in self.results:
                f.write(
                    f"Test {result['test']}: {result['status']} ({result['time']:.3f}s)\n"
                )
                if result["status"] != "Passed":
                    if "error" in result:
                        f.write(f"Error: {result['error']}\n")
                    if "diff" in result:
                        f.write("Difference:\n")
                        f.write(result["diff"] + "\n")

                f.write("\n")

        print(f"Report generated: {filename}")
style.css:
/* Profile Page Styles */
.profile-card {
    border: 1px solid #FFD700;
    box-shadow: 0 4px 8px rgba(65, 24, 89, 0.2);
}

.progress {
    background-color: #e9ecef;
    border-radius: 10px;
    overflow: hidden;
}

.progress-bar {
    background-color: #411859;
    transition: width 0.6s ease;
}

.list-group-item {
    border-left: 3px solid #FFD700;
    transition: transform 0.2s;
}

.list-group-item:hover {
    transform: translateX(5px);
}

/* Form styles */
.form-control:focus {
    border-color: #86b7fe;
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
}

/* Card styles */
.card {
    border-radius: 10px;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
}

/* Difficulty badges */
.badge.bg-success {
    background-color: #28a745 !important;
}

.badge.bg-warning {
    background-color: #ffc107 !important;
    color: #212529;
}

.badge.bg-danger {
    background-color: #dc3545 !important;
}

/* Remove default body margin */
body {
    margin: 0;
    padding: 0;
    overflow-x: hidden; 
}

/* Full width sections */
.full-width {
    width: 100vw;
    position: relative;
    left: 50%;
    right: 50%;
    margin-left: -50vw;
    margin-right: -50vw;
}

.content-padding {
    padding-left: 15px;
    padding-right: 15px;
}
/* Tab styles */
.nav-tabs {
    border-bottom: 2px solid #FFD700;
}

.nav-tabs .nav-link {
    color: #411859;
    border: none;
    padding: 10px 20px;
    font-weight: 500;
}

.nav-tabs .nav-link.active {
    color: #FFD700;
    background-color: #411859;
    border: none;
    border-bottom: 3px solid #FFD700;
}

.nav-tabs .nav-link:hover:not(.active) {
    color: #FFD700;
    background-color: rgba(65, 24, 89, 0.1);
    border: none;
}

/* File upload styling */
.form-control[type="file"] {
    padding: 0.375rem 0.75rem;
}

/* Tab content animation */
.tab-content {
    padding: 15px;
    border-left: 1px solid #dee2e6;
    border-right: 1px solid #dee2e6;
    border-bottom: 1px solid #dee2e6;
    border-radius: 0 0 5px 5px;
}
/* Difficulty filter indicator */
.difficulty-indicator {
    display: inline-block;
    padding: 0.35em 0.65em;
    font-size: 0.75em;
    font-weight: 700;
    line-height: 1;
    color: #fff;
    text-align: center;
    white-space: nowrap;
    vertical-align: baseline;
    border-radius: 0.25rem;
}

.bg-difficulty-easy {
    background-color: #28a745;
}

.bg-difficulty-medium {
    background-color: #ffc107;
    color: #212529;
}

.bg-difficulty-hard {
    background-color: #dc3545;
}

.badge.bg-beserk {
    background-color: #411859 !important;
    color: white !important;
}

/* Locked task styling */
.task-locked {
    opacity: 0.7;
    position: relative;
}

.task-lock-message {
    color: #411859;
    font-size: 0.9rem;
    padding: 0.5rem;
    background-color: rgba(255, 215, 0, 0.1);
    border-radius: 5px;
    margin-top: 1rem;
}

.task-locked .btn-primary {
    pointer-events: none;
    background-color: #6c757d;
    border-color: #6c757d;
}
base.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CodeMaster - Learn Python</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <header>
        <div class="container-fluid px-0">
            <div class="d-flex justify-content-between align-items-center py-3">
                <h1 class="m-0"><a href="/" class="text-decoration-none text-dark">CodeMaster</a></h1>
                <div>
                    {% if logged_in %}
                    <div class="dropdown">
                        <button class="btn btn-outline-primary dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown">
                            <i class="bi bi-person-fill"></i> {{ username }}
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li><a class="dropdown-item" href="{{ url_for('profile') }}">Profile</a></li>
                            <li><a class="dropdown-item" href="#">My Progress</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="{{ url_for('logout') }}">Logout</a></li>
                        </ul>
                    </div>
                {% else %}
                    <a href="{{ url_for('login') }}" class="btn btn-outline-primary">Login</a>
                {% endif %}
                </div>
            </div>
            
            <nav class="navbar navbar-expand navbar-dark bg-dark mb-4 container-fluid px-0">
                <div class="container-fluid">
                    <ul class="navbar-nav">
                        <li class="nav-item">
                            <a class="nav-link" href="/">All Tasks</a>
                        </li>
                        {% if logged_in %}
                        <li class="nav-item">
                            <a class="nav-link" href="{{ url_for('completed_tasks') }}">Completed Tasks</a>
                        </li>
                        {% endif %}
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="difficultyDropdown" role="button" data-bs-toggle="dropdown">
                                Difficulty
                            </a>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="{{ url_for('index') }}">All Difficulties</a></li>
                                <li><a class="dropdown-item" href="{{ url_for('index', difficulty='Easy') }}">Easy</a></li>
                                <li><a class="dropdown-item" href="{{ url_for('index', difficulty='Medium') }}">Medium</a></li>
                                <li><a class="dropdown-item" href="{{ url_for('index', difficulty='Hard') }}">Hard</a></li>
                                <li><a class="dropdown-item" href="{{ url_for('index', difficulty='Beserk') }}">Beserk</a></li>
                            </ul>
                        </li>
                    </ul>
                </div>
            </nav>
        </div>
    </header>

    <main class="container-fluid px-0">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ category }} alert-dismissible fade show">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        {% block content %}{% endblock %}
    </main>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="{{ url_for('static', filename='js/script.js') }}"></script>
</body>
</html>
completed.html:
{% extends "base.html" %}

{% block content %}
<div class="row mb-4">
    <div class="col">
        <h2>Your Completed Tasks</h2>
        
        {% if current_difficulty %}
        <div class="alert alert-info">
            Showing completed tasks with difficulty: <strong>{{ current_difficulty }}</strong>
            <a href="{{ url_for('completed_tasks') }}" class="btn btn-sm btn-outline-secondary ms-2">Clear filter</a>
        </div>
        {% endif %}
    </div>
</div>

<div class="row row-cols-1 row-cols-md-3 g-4">
    {% for task in tasks %}
    <div class="col">
        <div class="card h-100">
            <div class="card-body">
                <span class="badge {% if task.difficulty == 'Easy' %}bg-success
                 {% elif task.difficulty == 'Medium' %}bg-warning
                 {% elif task.difficulty == 'Hard' %}bg-danger
                 {% elif task.difficulty == 'Beserk' %}bg-beserk
                 {% endif %} mb-2">
                    {{ task.difficulty }}
                </span>
                <h5 class="card-title">{{ task.title }}</h5>
                <p class="card-text">{{ task.description }}</p>
                <a href="{{ url_for('view_task', task_id=task.id) }}" class="btn btn-primary">View Challenge</a>
                <span class="badge bg-success ms-2"><i class="bi bi-check-circle"></i> Completed</span>
            </div>
        </div>
    </div>
    {% else %}
    <div class="col-12">
        <div class="alert alert-warning">
            You haven't completed any tasks yet. Start coding!
        </div>
    </div>
    {% endfor %}
</div>
{% endblock %}
detail.html:
{% extends "base.html" %}

{% block content %}
<h1>Aufgabe</h1>
<p>{{ aufgabe.frage }}</p>
<form method="POST">
    <div class="mb-3">
        <label for="loesung" class="form-label">Deine Lösung:</label>
        <input type="text" class="form-control" id="loesung" name="loesung" required>
    </div>
    <button type="submit" class="btn btn-primary">Prüfen</button>
</form>
{% endblock %}
index.html:
{% extends "base.html" %}

{% block content %}
<div class="row mb-4">
    <div class="col">
        <h2>Practice Python Programming</h2>
        <p class="lead">Improve your Python skills by solving coding challenges.</p>
        
        {% if current_difficulty %}
        <div class="alert alert-info">
            Showing tasks with difficulty: <strong>{{ current_difficulty }}</strong>
            <a href="{{ url_for('index') }}" class="btn btn-sm btn-outline-secondary ms-2">Clear filter</a>
        </div>
        {% endif %}
    </div>
</div>

<div class="row row-cols-1 row-cols-md-3 g-4">
    {% for task in tasks %}
    <div class="col">
        <div class="card h-100 {% if task.difficulty == 'Beserk' and not beserk_unlocked %}task-locked{% endif %}">
            <div class="card-body">
                <span class="badge {% if task.difficulty == 'Easy' %}bg-success
                 {% elif task.difficulty == 'Medium' %}bg-warning
                 {% elif task.difficulty == 'Hard' %}bg-danger
                 {% elif task.difficulty == 'Beserk' %}bg-beserk
                 {% endif %} mb-2">
                    {{ task.difficulty }}
                </span>
                <h5 class="card-title">{{ task.title }}</h5>
                <p class="card-text">{{ task.description }}</p>
                
                {% if task.difficulty == 'Beserk' and not beserk_unlocked %}
                    <div class="task-lock-message">
                        🔒 Complete 10 tasks (including 3 Hard) to unlock
                    </div>
                {% else %}
                    <a href="{{ url_for('view_task', task_id=task.id) }}" class="btn btn-primary">
                        Solve Challenge
                    </a>
                {% endif %}
                
                {% if logged_in and task.id in completed_tasks %}
                    <span class="badge bg-success ms-2"><i class="bi bi-check-circle"></i> Completed</span>
                {% endif %}
            </div>
        </div>
    </div>
    {% endfor %}
</div>
{% endblock %}
login.html:
{% extends "base.html" %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h2 class="card-title text-center mb-4">Login</h2>
                
                <form method="POST" action="{{ url_for('login') }}">
                    <div class="mb-3">
                        <label for="username" class="form-label">Username</label>
                        <input type="text" class="form-control" id="username" name="username" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Login</button>
                    </div>
                </form>
                
                <div class="mt-3 text-center">
                    Don't have an account? <a href="{{ url_for('register') }}">Register here</a>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
profile.html:
{% extends "base.html" %}

{% block content %}
<div class="row mx-0">
    <div class="col-md-4 px-3">
        <div class="card mb-4">
            <div class="card-body text-center">
                <div class="mb-3">
                    <i class="bi bi-person-circle" style="font-size: 5rem; color: #FFD700;"></i>
                </div>
                <h3>{{ user['username'] }}</h3>
                {% if user['email'] %}
                <p class="text-muted">{{ user['email'] }}</p>
                {% endif %}
                <p class="text-muted">Member since: {{ user['join_date'] }}</p>
            </div>
        </div>
    </div>

    <div class="col-md-8 px-3">
        <div class="card mb-4">
            <div class="card-body">
                <h4 class="card-title">Your Progress</h4>

                <div class="progress mb-3" style="height: 30px;">
                    {% set progress_percent = (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0 %}
                    
                    <div class="progress-bar bg-success"
                        style="width: {{ progress_percent }}%"
                        aria-valuenow="{{ completed_tasks }}" 
                        aria-valuemin="0" 
                        aria-valuemax="{{ total_tasks }}">
                        {{ completed_tasks }}/{{ total_tasks }} tasks completed
                    </div>
                </div>

                <div class="row text-center">
                    <!-- Easy -->
                    <div class="col-md-3">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Easy</h5>
                                <p class="card-text">{{ completed_easy }}/{{ total_easy }} completed</p>
                                <div class="progress">
                                    <div class="progress-bar bg-success" 
                                         style="width: {{ (completed_easy/total_easy*100) if total_easy > 0 else 0 }}%">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Medium -->
                    <div class="col-md-3">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Medium</h5>
                                <p class="card-text">{{ completed_medium }}/{{ total_medium }} completed</p>
                                <div class="progress">
                                    <div class="progress-bar bg-warning" 
                                         style="width: {{ (completed_medium/total_medium*100) if total_medium > 0 else 0 }}%">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Hard -->
                    <div class="col-md-3">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Hard</h5>
                                <p class="card-text">{{ completed_hard }}/{{ total_hard }} completed</p>
                                <div class="progress">
                                    <div class="progress-bar bg-danger" 
                                         style="width: {{ (completed_hard/total_hard*100) if total_hard > 0 else 0 }}%">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!--Beserk-->
                    <div class="col-md-3">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Beserk</h5>
                                <p class="card-text">{{ completed_beserk }}/{{ total_beserk }} completed</p>
                                <div class="progress">
                                    <div class="progress-bar" 
                                         style="background-color: #411859; width: {{ (completed_beserk/total_beserk*100) if total_beserk > 0 else 0 }}%">
                                    </div>
                                </div>
                                {% if not beserk_unlocked %}
                                <div class="alert alert-dark mt-2 p-1">
                                    <small>Unlock by completing:<br>
                                    ✓ 10 total tasks<br>
                                    ✓ 3 Hard tasks</small>
                                </div>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Recent Activity</h4>
                {% if recent_tasks %}
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Task</th>
                                <th>Difficulty</th>
                                <th>Completed</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for task, completion_date in recent_tasks %}
                            <tr>
                                <td>{{ task.title }}</td>
                                <td>
                                    <span class="badge bg-{% if task.difficulty == 'Easy' %}success{% elif task.difficulty == 'Medium' %}warning{% elif task.difficulty == 'Hard' %}danger{% else %}dark{% endif %}">
                                        {{ task.difficulty }}
                                    </span>
                                </td>
                                <td>
                                    <small class="text-muted">{{ completion_date.strftime('%b %d, %Y %I:%M %p') }}</small>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
                {% else %}
                <div class="alert alert-info">
                    You haven't completed any tasks yet. Start coding!
                </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>
{% endblock %}
register.html:
{% extends "base.html" %}

{% block content %}
<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h2 class="card-title text-center mb-4">Register</h2>
                
                <form method="POST" action="{{ url_for('register') }}">
                    <div class="mb-3">
                        <label for="username" class="form-label">Username</label>
                        <input type="text" class="form-control" id="username" name="username" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="email" class="form-label">Email (optional)</label>
                        <input type="email" class="form-control" id="email" name="email">
                    </div>
                    
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary">Register</button>
                    </div>
                </form>
                
                <div class="mt-3 text-center">
                    Already have an account? <a href="{{ url_for('login') }}">Login here</a>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}
solution.html:
{% extends "base.html" %}

{% block content %}
<div class="alert alert-info">
    {{ ergebnis }}
</div>
<a href="/work" class="btn btn-secondary">Back to the Tasks</a>
{% endblock %}
task.html:
{% extends "base.html" %}

{% block content %}
<div class="row">
    <div class="col-md-8">
        <div class="card mb-4">
            <div class="card-body">
                <h2 class="card-title">{{ task.title }}</h2>
                <p class="card-text">{{ task.description }}</p>
                
                <h4 class="mt-4">Example Test Cases:</h4>
                <ul>
                    {% for case in test_cases %}
                    <li>Input: <code>{{ case.input }}</code> → Output: <code>{{ case.output }}</code></li>
                    {% endfor %}
                </ul>
            </div>
        </div>
        
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                <div class="card mb-4">
                    <div class="card-body">
                        <h4>Test Results</h4>
                        {% for category, message in messages %}
                            <div class="alert alert-{{ 'success' if category == 'success' else 'danger' }}">
                                {{ message | replace('\n', '<br>') | safe }}
                            </div>
                        {% endfor %}
                    </div>
                </div>
            {% endif %}
        {% endwith %}
    </div>
    
    <div class="col-md-4">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Submit Your Solution</h4>
                
                <ul class="nav nav-tabs mb-3" id="solutionTabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="code-tab" data-bs-toggle="tab" data-bs-target="#code" type="button" role="tab">Write Code</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="upload-tab" data-bs-toggle="tab" data-bs-target="#upload" type="button" role="tab">Upload File</button>
                    </li>
                </ul>
                
                <div class="tab-content" id="solutionTabsContent">
                    <div class="tab-pane fade show active" id="code" role="tabpanel">
                        <form method="POST" action="{{ url_for('submit_solution', task_id=task.id) }}">
                            <div class="mb-3">
                                <textarea class="form-control" name="code" rows="10" 
                                          placeholder="Write your Python code here" required></textarea>
                            </div>
                            <button type="submit" class="btn btn-primary">Submit Solution</button>
                        </form>
                    </div>
                    
                    <div class="tab-pane fade" id="upload" role="tabpanel">
                        <form method="POST" action="{{ url_for('submit_solution', task_id=task.id) }}" enctype="multipart/form-data">
                            <div class="mb-3">
                                <label for="pythonFile" class="form-label">Upload Python File (.py)</label>
                                <input class="form-control" type="file" id="pythonFile" name="pythonFile" accept=".py" required>
                            </div>
                            <button type="submit" class="btn btn-primary">Upload and Submit</button>
                        </form>
                    </div>
                </div>
                
                {% if completed %}
                <div class="alert alert-success mt-3">
                    <i class="bi bi-check-circle"></i> You've completed this challenge!
                </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>
{% endblock %}